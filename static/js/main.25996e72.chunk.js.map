{"version":3,"sources":["UserForm.js","FriendList.js","FriendForm.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","this","props","handleChange","name","age","nextForm","id","className","placeholder","value","onChange","e","type","onClick","React","Component","FriendList","friends","deleteFriend","map","friend","i","key","FriendForm","addFriend","handleSubmit","Data","startOver","App","setState","target","preventDefault","document","getElementById","classList","add","remove","newFriend","state","friendsArr","splice","displayData","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25996e72.chunk.js","sourcesContent":["import React from 'react';\n\nclass UserForm extends React.Component {\n\n  render() {\n    const { handleChange, name, age, nextForm } = this.props;\n\n    return (\n      <form id=\"user-form\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <label>Name:</label>\n            <input\n              placeholder=\"Name\"\n              name=\"name\"\n              value={ name }\n              onChange={ e => handleChange(e) }/>\n          </div>\n\n          <div className=\"column\">\n            <label>Age:</label>\n            <input\n              placeholder=\"Age\"\n              type=\"number\"\n              name=\"age\"\n              value={ age }\n              onChange={e => handleChange(e) }/>\n          </div>\n        </div>\n\n        <div className=\"row\" id=\"next\">\n          <button onClick={ e => nextForm(e) }>NEXT</button>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default UserForm;\n","import React from 'react';\n\nclass FriendList extends React.Component {\n\n  render() {\n    const { friends, deleteFriend } = this.props;\n\n    return (\n      <ul id=\"friend-list\">\n      {\n        friends.map((friend, i) => {\n          return (\n            <li key={i} className=\"row\">\n              <span className=\"friend\"> { friend }</span>\n              <button className=\"delete-friend\"\n              onClick={ deleteFriend(i) }>-</button>\n            </li>\n          )\n        })\n      }\n      </ul>\n    )\n  }\n}\n\nexport default FriendList;\n","import React from 'react';\nimport FriendList from './FriendList';\n\nclass FriendForm extends React.Component {\n\n  render() {\n    const { friend, friends, addFriend,\n      deleteFriend, handleChange, handleSubmit } = this.props;\n\n    return (\n      <form id=\"friend-form\" className=\"hidden\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <label>Friend Name:</label>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <input className=\"zero-margin\"\n            placeholder=\"friend\"\n            name=\"friend\"\n            value={ friend }\n            onChange={ e => handleChange(e) } />\n\n          <button className=\"zero-margin\"\n            onClick={ e => addFriend(e) } >+</button>\n        </div>\n\n        <FriendList friends={ friends } deleteFriend={ deleteFriend }/>\n\n        <div className=\"row\">\n          <button onClick={ e => handleSubmit(e) }>SUBMIT</button>\n        </div>\n      </form>\n    )\n  }\n\n\n}\n\nexport default FriendForm;\n","import React from 'react';\n\nclass Data extends React.Component {\n\n  render() {\n    const { name, age, friends, startOver } = this.props;\n\n    return (\n      <div id=\"data\" className=\"hidden\">\n        <p>name: { name }</p>\n        <p>age: { age }</p>\n\n        <p><strong>Friends:</strong></p>\n        {\n          friends.map((friend, i) => {\n            return (\n              <p key={i}>Friend #{i}: { friend }</p>\n            )\n          })\n        }\n        <button className=\"zero-margin\"\n          onClick={ startOver }>Start Over</button>\n      </div>\n    )\n  }\n}\n\nexport default Data;\n","import React from 'react';\nimport './App.css';\n\nimport UserForm from './UserForm';\nimport FriendForm from './FriendForm';\nimport Data from './Data';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      age: '',\n      friend: '',\n      friends: []\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  nextForm = e => {\n    e.preventDefault();\n    document.getElementById('user-form').classList.add('hidden');\n    document.getElementById('friend-form').classList.remove('hidden');\n  }\n\n  displayData() {\n    document.getElementById('friend-form').classList.add('hidden');\n    document.getElementById('data').classList.remove('hidden');\n  }\n\n  addFriend = e => {\n    e.preventDefault();\n    const newFriend = this.state.friend;\n    this.setState({\n      friend: '',\n      friends: [...this.state.friends, newFriend]\n    });\n  }\n\n  deleteFriend = i => e => {\n    e.preventDefault();\n    let friendsArr = this.state.friends;\n    friendsArr.splice(i, 1);\n    this.setState({\n      friends: friendsArr\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.displayData();\n  }\n\n  startOver = e => {\n    e.preventDefault();\n    this.setState({\n      name: '',\n      age: '',\n      friend: '',\n      friends: []\n    });\n    document.getElementById('data').classList.add('hidden');\n    document.getElementById('user-form').classList.remove('hidden');\n  }\n\n  render() {\n      return (\n      <div className=\"App\">\n        <UserForm\n          name={ this.state.name }\n          age={ this.state.age }\n          nextForm={ e => this.nextForm(e) }\n          handleChange={ e => this.handleChange(e) } />\n        <FriendForm\n          friend= { this.state.friend }\n          friends={ this.state.friends }\n          handleChange={ e => this.handleChange(e) }\n          addFriend={ e => this.addFriend(e) }\n          deleteFriend={ e => this.deleteFriend(e) }\n          handleSubmit={ e => this.handleSubmit(e) } />\n        <Data\n          name={ this.state.name }\n          age={ this.state.age }\n          friends={ this.state.friends }\n          startOver={ e => this.startOver(e) } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}